// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package serialized_messages

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Reply struct {
	_tab flatbuffers.Table
}

func GetRootAsReply(buf []byte, offset flatbuffers.UOffsetT) *Reply {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Reply{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Reply) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Reply) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Reply) ReplyUnionType() ReplyUnion {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ReplyUnion(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Reply) MutateReplyUnionType(n ReplyUnion) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *Reply) ReplyUnion(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func ReplyStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ReplyAddReplyUnionType(builder *flatbuffers.Builder, replyUnionType ReplyUnion) {
	builder.PrependByteSlot(0, byte(replyUnionType), 0)
}
func ReplyAddReplyUnion(builder *flatbuffers.Builder, replyUnion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(replyUnion), 0)
}
func ReplyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
