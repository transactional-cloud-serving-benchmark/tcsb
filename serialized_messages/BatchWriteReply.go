// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package serialized_messages

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BatchWriteReply struct {
	_tab flatbuffers.Table
}

func GetRootAsBatchWriteReply(buf []byte, offset flatbuffers.UOffsetT) *BatchWriteReply {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BatchWriteReply{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BatchWriteReply) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BatchWriteReply) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BatchWriteReply) NWrites() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BatchWriteReply) MutateNWrites(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func BatchWriteReplyStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func BatchWriteReplyAddNWrites(builder *flatbuffers.Builder, nWrites uint64) {
	builder.PrependUint64Slot(0, nWrites, 0)
}
func BatchWriteReplyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
